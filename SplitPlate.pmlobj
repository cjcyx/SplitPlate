
define object SplitPlate
	member .pointCount is real
	member .dataPoint is EDGPOSITIONDATA
endobject

define method .AddCircel(!center is string,!diam is real)
	AID CYLinder NUMB 20615 AT $!center DIAM $!diam
endmethod

define method .ClearAIDCirc()
	aid clear CYLinder 20615
	handle any
	endhandle
	aid clear line 20615
	handle any
	endhandle
endmethod

define method .AddSquare(!center is string,!xLen is real,!yLen is real,!ang is real)
	!pos = $!center
	!tmp = !center.split(' ')
	!ref = !tmp[7]
	!xLen1 = !XLen / 2
	!yLen1 = !yLen / 2
	!pos1 = !pos.offset(E$!ang N wrt $!ref,$!xLen1).offset(E ( $!ang + 90 ) N wrt $!ref,$!yLen1)
	!pos2 = !pos.offset(E$!ang N wrt $!ref,$!xLen1).offset(E ( $!ang - 90 ) N wrt $!ref,$!yLen1)
	!pos3 = !pos.offset(E($!ang + 180 )N wrt $!ref,$!xLen1).offset(E ( $!ang - 90 ) N wrt $!ref,$!yLen1)
	!pos4 = !pos.offset(E($!ang + 180 )N wrt $!ref,$!xLen1).offset(E ( $!ang + 90 ) N wrt $!ref,$!yLen1)
	aid line num 20615 $!pos1 to $!pos2
	aid line num 20615 $!pos2 to $!pos3
	aid line num 20615 $!pos3 to $!pos4
	aid line num 20615 $!pos4 to $!pos1
endmethod

define method .AddAID(!posStr is string,!ang is real)
	!tmp = !posStr.split(' ')
	!ref = !tmp[7]
	!pos = $!posStr
	!pos1 = !pos.offset(E$!ang N wrt $!ref,1000)
	!pos2 = !pos.offset(E($!ang + 180 )N wrt $!ref,1000)
	aid line num 20592 $!pos1 to $!pos2
	!post1 = !pos.offset(E0N wrt $!ref,200)
	!post2 = !pos.offset(E90N wrt $!ref,200)
	!post3 = !pos.offset(E180N wrt $!ref,200)
	!post4 = !pos.offset(E270N wrt $!ref,200)
	!post5 = !pos.offset(E$!ang N wrt $!ref,200)
	AID TEXT NUMB 20592 '0' AT $!post1      
	AID TEXT NUMB 20592 '90' AT $!post2    
	AID TEXT NUMB 20592 '180' AT $!post3    
	AID TEXT NUMB 20592 '270' AT $!post4
	AID TEXT NUMB 20592 '$!ang' AT $!post5
endmethod

define method .ClearAID() is string
	aid clear line 20592
	handle any
	endhandle
	aid clear text 20592
	handle any
	endhandle
endmethod

define method .GetPoints(!ref is string)
	$!ref
	!arr = array()
	var !all coll all pave for ce
	do !pave values !all
		$!pave
		var !e e wrt pane
		var !n n wrt pane
		var !rad fradius
		!arr.append('$!e,$!n,$!rad')
	enddo
	$!ref
	!!SplitPlate.Run(!arr)
endmethod

define method .CopyPANE(!ref is string)
	MARKDB
	$!ref
	new pane copy $!ref
	ploo1
	!all = mem
	do !a values !all
		$!a 
		var !type type
		delete $!type 
	enddo
endmethod

define method .DeletePANE(!ref is string)
	MARKDB
	$!ref
	delete PANE
endmethod

define method .GetPANE()
	--var !ref ref of id@
	--$!ref
	var !ref ref
	var !type type
	if(!type neq 'PANE') then
		!!alert.error('请选择PANE！')
		return
	endif	
	!!SplitPlate.GetPave(!ref)
endmethod

define method .GetPostion(!ref is string)	
	!packet = object EDGPACKET()
	!packet.definePosition('Pick Element <esc> to finish')
	!packet.description = !ref
	!packet.action = '!!SplitObject.CalCulatePosition(!this.return[1],!this.description)'
	!packet.close = '!!SplitPlate.ChooseClose()'
	!!edgCntrl.add(!packet)
	show !!EDGNEWPOSITIONING
endmethod

define method .GetPostionSplitOnly(!ref is string)	
	!packet = object EDGPACKET()
	!packet.definePosition('Pick Element <esc> to finish')
	!packet.description = !ref
	!packet.action = '!!SplitObject.CalCulatePositionSplitOnly(!this.return[1],!this.description)'
	--!packet.close = '!!SplitPlate.ChooseClose()'
	!!edgCntrl.add(!packet)
	show !!EDGNEWPOSITIONING
endmethod

define method .CalCulatePositionSplitOnly(!data is EDGPOSITIONDATA,!ref is string)
	if ( Unset(!this.pointCount) ) then
		!this.pointCount = 1
		!!alert.message('Please choose the next point.')
		!this.dataPoint = !data
	else		
		!this.pointCount = real()
		!pos = !data.position
		!pos = !pos.wrt($!ref)		
		!pos1 = !this.dataPoint.position			
		!line = !pos1.line(!pos)	
		!pos1 = !pos1.offset(!line.direction(),5)
		!pos1 = !pos1.wrt($!ref)
		!dir = N wrt $!ref
		!angle = !line.direction().angle(!dir) + 90
		!e = !pos1.East
	  !n = !pos1.North	  
		!!edgCntrl.remove(!ref)
		!!SplitPlate.SplitOnlyGetPoint('$!e','$!n',!angle)
	endif
endmethod

define method .CalCulatePosition(!data is EDGPOSITIONDATA,!ref is string)
	!pos = !data.position
	--q var !pos
	!pos = !pos.wrt($!ref)
	--q var !pos
	!e = !pos.East
	!n = !pos.North
	!item = !data.item
	$!item
	!ysize = 0
	!lod = lod
	handle any
		!size = csgbox
		!lod = abs( !size[4] - !size[1] )
		!ysize = abs( !size[5] - !size[2])
	endhandle
	var !styp styp
	if(!styp eq 'VL') then
		!para = para
		!lod = !para[1]
		!ysize = !para[2]
	endif
	var !type type
	if(!type eq 'CTRAY') then
		!para = para
		!lod = !para[3]
		!ysize = !para[4]
	endif
	!thickness = IPARA[1]
	handle any
		!thickness = 0
	endhandle
	!lod = !lod + !thickness
	!!edgCntrl.remove(!ref)
	!!SplitPlate.GetPipe('$!e','$!n','$!lod','$!ysize')
endmethod

define method .OnClose()
	!!SplitPlate.Delete()
	!!SplitObject.Delete()
endmethod

define method .callback(!array is array)
	do !a values !array
		$!a
		handle any
		endhandle
	enddo
endmethod